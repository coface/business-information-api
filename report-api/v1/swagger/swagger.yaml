openapi: 3.0.1
info:
  title: ICON Report API
  description: |
    The Report API is a service provided by ICON, Coface Business Information offer. It allows allows you to programmatically place orders for Business reports on companies, Debtor Risk Assessments, Credit Opinions.
    You also can monitor and retrieve monitoring notifications on companies.
    
    You have questions on how use this API, check our [FAQ](https://github.com/coface/business-information-api/wiki/FAQ).
    # Environment
    ICON provides you two environments :
    |Instance | Base URL | Purpose |
    |-------------------------|-------------------------|-------------------------|
    | Production              | https://b2b.cofacecentraleurope.com/api/bi/v1   | Get the real data. The orders will be charged to your account. |
    | Playgroung              | https://cce-test.icon.ua.coface.com/web/api/bi/v1 | Test your code without affecting real-world data.|
    
    On the playgroung, there are two possibilities :
    <ul>
      <li>Use a default account by using the demo API key 8842ace2-e377-48d9-b129-f952950ea535.</li>
      <li>Use a custom key.</li>
    </ul>
    The playground is limited. It contains old. You can only request immediate report and no notification can be created from it.
    
    To get your own API keys (Test or Production), [contact us](https://information.coface.com/en-gb/contact) and ask to enable API access for your account.
    
    # Security
    It's managed via an apikey authentication and an access token.<br>
    1) Request an account to our [sales teams](https://information.coface.com/en-gb/contact)
    2) Use your api key to request an token.The API Key must be passed in the \"x-api-key\" header.
    3) Request data by passing the API Key in the \"x-api-key\" header and the token in \"authorization\" header
   
    # Formats
    If you are planning to retrieve our products in XML or JSON please find below links to our schema.
    [JSON schema](https://icon.cofacecentraleurope.com/web/online/downloads/icon.json)
    [XML schema](https://icon.cofacecentraleurope.com/web/online/downloads/ICON.DTD)

    # Language
    For content which is language-specific, the language can be selected in the user's profile.\
    Alternatively the Accept-Language header may be used to specify a language, which will then override the language selected in the user's profile.
    # Code samples Github
    Additional information and code samples demonstrating the use of the API can be found on the [github](https://github.com/coface/business-information-api).
    # Use case
    The following simple use cases provide an overview of how API operations can be used in typical scenarios.
    ## Ordering a credit report for a company
    Assuming you have the name and address of a company for which you want a report.
    <ol>
      <li>Use the "findCompany" operation to find the company (or "identifyCompany" if you have a unique identifer for the company). This returns a list of matching companies.</li>
      <li>Using the "company_id" of the selected company, order a report on the company using the "placeOrder" operation. The response contains the id of the order.</li>
      <li>Wait the completion of the order. The "getOrder" operation is used to check the status of it.</li>
      <li>When the order is ready, "getOrderDocumentList" will return a list of documents for the order.</li>
      <li>Retrive the document via "getOrderDocument".</li>
    </ol>
    
    ## Monitoring a company
    When you monitor a company, you receive notifications each time new data becomes available about the company.
    <ol>
      <li>Use the "findCompany" operation to find the company (or "identifyCompany" if you have a unique identifer for the company). This returns a list of matching companies.</li>
      <li>Using the "company_id" of the selected company, order a monitoring on the company using the "placeMonitoringOrder" operation. The response contains the id of the order.</li>
      <li>Wait the completion of the order. The "getOrder" operation is used to check the status of it.</li>
      <li>When the order is ready, "getOrderDocumentList" will return a list of documents for the order.</li>
      <li>Retrive the document via "getOrderDocument".</li>
    </ol>
    
    Once the monitoring is set, two cases :
    <ul>
      <li>You have filled a callback url. If so, wait until you get ping on this url.</li>
      <li>You didn't fill a callback url. Call on a regular basis "getNotifications".</li>
    </ul>

    Once you get the notification id, retrieve the data by using the "getNotificationDocument" to retrieve the report associated with each notification.
  version: 1.0.0
  x-logo:
    url: https://raw.githubusercontent.com/coface/business-information-api/master/coface-api.png
servers:
  - url: http://localhost:8080/api/bi/v1
tags:
  - name: Countries
    description: Lists of covered countries and associated identifiers.
    x-displayName: Countries
  - name: Company Identification
    description: Identify the company you wish to order.
    x-displayName: Company Identification
  - name: Order
    description: Place an order for a product (e.g. credit report).
    x-displayName: Order
  - name: Notifications
    description: Download notifications of monitored companies
    x-displayName: Monitoring Notifications
  - name: Misc
    description: Miscellaneous methods
    x-displayName: Misc
security:
  - ApiKeyAuth: []
    CofaceOAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
    CofaceOAuth:      
      type: apiKey
      in: header
      name: x-api-key
  responses:
    400-BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: You exceeded your rate-limit of 60 requests / minute
    403-Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: invalid or missing api_key
    404-NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: HTTP 404 Not Found
    429-TooManyRequests:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: You exceeded your rate-limit of 60 requests / minute
    500-InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    Address:
      type: object
      properties:
        country:
          type: string
          description: ISO 3166-1 alpha-2 code (for instance "PL" for Poland)
          example: PL
        zip_code:
          type: string
          description: postal code in which the company is located
        city:
          type: string
          description: city in which the company is located
        address_lines:
          type: array
          description: address of the company
          items:
            type: string
        telephone:
          type: string
          description: telephone number of the company
    AvailableCompanyIdentifiers:
      type: object
      properties:
        company_id:
          type: boolean
          description: the unique identifier of the company
        icon_number:
          type: boolean
          description: the ICON number of the company
        easy_number:
          type: boolean
          description: the EASY number of the company
        national_identifier_types:
          type: array
          description: the types of national identifiers available
          items:
            $ref: '#/components/schemas/NationalIdentifierType'
    AvailableCountry:
      type: object
      properties:
        iso_code:
          type: string
          description: ISO 3166-1 alpha-2 code (for instance "PL" for Poland)
          example: PL
        name:
          type: string
          description: name of the country (for instance "Poland")
          example: Poland
        offline_orders:
          type: boolean
          description: offline orders can be placed for companies in this country.
            An offline order is an order for a company which will be researched if
            an up-to-date report is not available.
        online_orders:
          type: boolean
          description: online orders can be placed for companies in this country.
            An online order is an order where a report is available immediately.
    Change:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/MonitoredParameterType'
        type2:
          type: string
          description: Depending on the type, describes the change further.
        type3:
          type: array
          items:
            type: string
            description: Depending on the type and type2 describes the change further
    CodedValue:
      type: object
      properties:
        code_value:
          type: string
          description: a numeric or alphanumeric code value.
          example: "200"
        code_name:
          type: string
          description: name of the code table to which this code belongs.
          example: CC8800
        text:
          type: string
          description: text associated with this code.
          example: CREDIT REPORT
        language:
          type: string
          description: The language of the text
    CodeTable:
      type: object
      properties:
        code_name:
          type: string
          description: code table name.
          example: CC8800
        description:
          type: string
          description: description of the code table.
          example: Products
    Company:
      type: object
      properties:
        company_id:
          type: string
          description: unique identifier of the company
          example: string
        icon_number:
          type: integer
          description: system-specific identifier of the company
        easy_number:
          type: string
          description: EASY number of the company
        company_name:
          type: string
          description: name of the company
        registration_country:
          type: string
          description: ISO 3166-1 alpha-2 country code (for instance "PL" for Poland)
        address:
          $ref: '#/components/schemas/Address'
        national_identifiers:
          type: array
          description: national identifiers of the company (e.g VAT ID)
          items:
            $ref: '#/components/schemas/NationalIdentifier'
        activities:
          type: array
          description: the activities which the company conducts
          items:
            $ref: '#/components/schemas/Nace'
        legalform:
          $ref: '#/components/schemas/Legalform'
        as_of_date:
          type: string
          description: the validity date of the company information
          format: date-time
        date_of_last_balance_sheet:
          type: string
          description: the date of the last balance sheet
          format: date-time
    CompanyDetails:
      type: object
      properties:
        company:
          $ref: '#/components/schemas/Company'
        creditreport_products:
          type: array
          description: available products for this company
          items:
            $ref: '#/components/schemas/CreditReportProduct'
        monitoring_products:
          type: array
          description: available products for this company
          items:
            $ref: '#/components/schemas/MonitoringProduct'
    CompanySearchResult:
      type: object
      properties:
        company_id:
          type: string
          description: the unique identifier of the company
        company_name:
          type: string
          description: the name of the company
        registration_country:
          type: string
          description: ISO 3166-1 alpha-2 country code (for instance "PL" for Poland)
        icon_number:
          type: integer
          description: a system company identifier
        easy_number:
          type: string
          description: EASY number of the company
        address:
          $ref: '#/components/schemas/Address'
        national_identifiers:
          type: array
          description: national identifiers for the company (VAT ID etc)
          items:
            $ref: '#/components/schemas/NationalIdentifier'
    CompanyUnidentified:
      required:
      - registration_country
      type: object
      properties:
        name:
          type: string
          description: name of the company
          example: Smith Sheet Metal Inc.
        registration_country:
          type: string
          description: ISO 3166-1 alpha-2 code
          example: PL
        national_identifiers:
          type: array
          description: a list of national identifiers for the company (e.g. VAT ID)
          items:
            $ref: '#/components/schemas/NationalIdentifier'
        city:
          type: string
          description: city where the company is located
        zip_code:
          type: string
          description: postal code of company address
        address_lines:
          type: array
          description: company address
          items:
            type: string
      description: Fill this out if you have not yet uniquely identified the company
        (using findCompany or identifyCompany)
    CreditReportProduct:
      type: object
      properties:
        product_code:
          type: string
          description: product code (a value from code table CC8800)
        name:
          type: string
          description: name of the product
        availability:
          type: string
          enum:
          - available_on_order
          - available_immediately
        format:
          type: array
          items:
            type: string
            enum:
            - html
            - pdf
            - xml
            - txt
            - json
        countries:
          type: string
          description: list of iso country codes for which this product is available
    ErrorResponse:
      required:
      - message
      type: object
      properties:
        code:
          type: integer
          description: numeric error code (http status 4xx-5xx).
          example: 500
        message:
          type: string
          description: textual error message.
    Legalform:
      type: object
      properties:
        code:
          type: string
          description: A coded value of type CC0040, for a list of all available legal
            forms see /codedvalues/CC0040
          example: "300"
        text:
          type: string
          example: Limited liability company
    MonitoredParameterType:
      type: object
      properties:
        code:
          type: string
          description: A coded value of type CC8821, for a list of all available legal
            forms see /codedvalues/CC8821
          example: "300"
        text:
          type: string
          example: Financial Information
    MonitoringProduct:
      type: object
      properties:
        product_code:
          type: string
          description: product code (a value from code table CC8800)
        name:
          type: string
          description: name of the product
        availability:
          type: string
          enum:
          - can_be_monitored
          - requires_a_research
        format:
          type: array
          items:
            type: string
            enum:
            - html
            - pdf
            - xml
            - txt
            - json
        countries:
          type: string
          description: list of iso country codes for which this product is available
    Nace:
      type: object
      properties:
        code:
          type: string
          description: A NACE Rev2 code
          example: "72"
        text:
          type: string
          example: Growing of non-perennial crops
    NationalIdentifier:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/NationalIdentifierType'
        value:
          type: string
          description: the national identifier
          example: R12312323
    NationalIdentifierType:
      type: object
      properties:
        code:
          type: integer
          description: the national identifier
          example: 120
        name:
          type: string
          description: the national identifier
          example: VAT Number
    Notification:
      type: object
      properties:
        id:
          type: integer
          description: the unique id of the notification (which can be used to retrieve
            the documents associated with the notification).
          example: 1029390
        order_id:
          type: string
          description: the monitoring order's id to which the notification belongs
            to
          example: 62a50848-e9de-45bd-9e07-b2b1d8cc7cb0
        timestamp:
          type: string
          description: the time at which the notification was created.
          format: date-time
        company:
          $ref: '#/components/schemas/Company'
        changes:
          type: array
          description: For details see https://github.com/coface/business-information-api/wiki/Monitoring-Notifications
          items:
            $ref: '#/components/schemas/Change'
    OrderDetails:
      type: object
      properties:
        coface_reference:
          type: string
        customer_reference:
          type: string
          description: unique id of the company
        order_type:
          type: string
          enum:
          - credit_report
          - monitoring
        product_code:
          type: string
          description: product code (a value from code table CC8800)
        company_id:
          type: string
        ordered:
          type: string
          description: date and time when the order was placed
          format: date-time
        requested_delivery:
          type: string
          description: date and time when delivery was requested
          format: date-time
        delivered:
          type: string
          description: date and time when order was delivered
          format: date-time
        your_question:
          type: string
          description: the question asked when the order was placed.
        our_answer:
          type: string
          description: the answer provided by the researcher.
        negative_reason:
          type: string
          description: If the order could not be fulfilled, this is the reason.
        negative_comment:
          type: string
          description: If the order could not be fulfilled, this is the comment from
            the researcher.
    OrderStatus:
      type: object
      properties:
        id:
          type: string
          description: the unique id of the order
          example: b84b4972-5567-40f8-be93-cb049f9d3c76
        order_status:
          type: string
          enum:
          - in_preparation
          - open
          - cancelled
          - finished
          - monitoring_inactive
          - monitoring_active
        status_text:
          type: string
        order_details:
          $ref: '#/components/schemas/OrderDetails'
        report_documents:
          type: array
          items:
            $ref: '#/components/schemas/ReportDocument'
    ProductDetails:
      required:
      - format
      - language
      - product_code
      type: object
      properties:
        product_code:
          type: string
          description: product code (a value from code table CC8800)
          format: integer
        language:
          type: string
          description: ISO ISO 639-1 language code (for instance "en")
        format:
          type: string
          description: file format (�txt� and �html� formats are not available for
            Debtor Risk Assesment(DRA), Credit Opinion(CO) and Coface Advanced Opinion(CAO)
            reports)
          enum:
          - html
          - pdf
          - xml
          - txt
          - json
    RequestedCreditReportDetails:
      type: object
      properties:
        research_instructions:
          type: string
          default: immediate_if_available_research_otherwise
          enum:
          - immediate_no_research
          - immediate_if_available_research_otherwise
          - research_no_immediate
        research_callback_url:
          type: string
          description: a URL which ICON will call when the order is ready
          format: uri
          example: https://mycompany.com/credit-report-orders/order-complete?our_ref=AB788823
        research_delivery_speed:
          type: string
          default: normal
          enum:
          - normal
          - express
          - flash
        max_credit_amount:
          type: integer
          description: the maxiumum credit to be granted to the company
          format: int64
        max_credit_currency:
          type: string
          description: the currency of the maxiumum credit
        requested_amount:
          type: string
          description: the currency of the maxiumum credit
        report_currency:
          type: string
          description: Applicable only for Credit Opinion and Coface Adanced Opinion
            products to specify the currency in which the coverage will be expressed.
            For all other products this parameter should not be specified
          default: ""
          enum:
          - ""
          - USD
          - EUR
          - GBP
        question:
          type: string
          description: if you want a researcher to answer one or more specific questions
            about the company, include them here
          example: Is this company actually doing business at the registered address?
    RequestedMonitoringDetails:
      type: object
      properties:
        start_date:
          type: string
          description: The date when monitoring should start. If omitted, today's
            date is assumed.
          format: date-time
        duration_months:
          type: integer
          description: the number of months to monitor the company
        notification_callback_url:
          type: string
          description: When a change notification is created, this URL will be called
    RequestedMonitoringOrderDetails:
      required:
      - company_id
      - product_details
      type: object
      properties:
        company_id:
          type: string
          description: unique id of the company
        customer_reference:
          type: string
          description: your own identifier for the order which was given when you
            placed the order
        product_details:
          $ref: '#/components/schemas/ProductDetails'
        monitoring_details:
          $ref: '#/components/schemas/RequestedMonitoringDetails'
    RequestedOrderDetails:
      required:
      - product_details
      type: object
      properties:
        customer_reference:
          type: string
          description: your own identifier for the order which was given when you
            placed the order
        company_id:
          type: string
          description: unique id of the company
        company_unidentified:
          $ref: '#/components/schemas/CompanyUnidentified'
        product_details:
          $ref: '#/components/schemas/ProductDetails'
        credit_report_details:
          $ref: '#/components/schemas/RequestedCreditReportDetails'
    ReportDocument:
      type: object
      properties:
        file_name:
          type: string
          description: Document file name.
        mime_type:
          type: string
          description: Mime-type of the document.
    ServerStatus:
      type: object
      properties:
        status:
          type: string
          description: Description of the server status.
    UpdatedOrder:
      type: object
      properties:
        customer_reference:
          type: string
          description: the reference provided by the customer when the order was placed.
          example: 'OUR TRACKING NUMBER #34234'
        contact_name:
          type: string
          description: an optional contact name to identify the person updating the
            order.
          example: Tom Smith
        contact_email:
          type: string
          description: an optional contact email address for the person updating the
            order.
          example: tom@smith.com
        contact_telephone:
          type: string
          description: an optional telephone number for the person updating the order.
          example: +43-1-62552-410
        contact_fax:
          type: string
          description: an optional fax number for the person updating the order.
          example: +43-1-62552-444
        comment:
          type: string
          description: a comment to the order (for instance "please ensure that you
            include all directors of this company").
          example: Please ensure that you include all directors of this company
    UpdatedStatus:
      type: object
      properties:
        action:
          type: string
          description: the action which you request on the order
          example: cancel
          enum:
          - stop_monitoring
          - undo_stop_monitoring
          - cancel
        cancel_reason:
          type: string
          description: Required when the order is requested to be cancelled.
          example: Order placed by mistake, please cancel.
paths:
  /ping:
    get:
      tags:
      - Misc
      description: Returns the server status - you can use it as a health check to
        ensure that the REST endpoint is active.
      operationId: ping
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerStatus'
        '403':
          $ref: '#/components/responses/403-Forbidden'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/ping'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/ping", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/ping";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /countries:
    get:
      tags:
      - Countries
      description: List the countries in which you can order reports on companies.
      operationId: getCountries
      responses:
        '200':
          description: Array of countries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableCountry'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
        - lang: Curl
          source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
            "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/countries'
        - lang: Python
          source: |-
            #!/usr/bin/env python3
            import requests
            import json
            headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
            response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/countries", headers=headers)
            if (response.status_code == 200):
                print(json.dumps(response.json(), indent=2))
            else:
                raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
        - lang: C#
          source: |-
            using System;
            using System.Net.Http;
        
            namespace ConsoleProgram
            {
                public class Class1
                {
                    private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/countries";
        
                    static void Main(string[] args)
                    {
                        using (var httpClient = new HttpClient())
                        {
                            httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                            var response = httpClient.GetStringAsync(new Uri(url)).Result;
                            Console.WriteLine(response.ToString());
                        }
                    }
                }
            }
  /country/{country_iso_code}/identifiers:
    get:
      tags:
      - Countries
      description: Lists the available identifiers for the country (some company identifiers
        are country-specific).
      operationId: getIdentifiers
      parameters:
      - name: country_iso_code
        in: path
        description: ISO 3166-1 alpha-2 code (for instance "PL" for Poland)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: Array of countries identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableCompanyIdentifiers'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/country/PL/identifiers'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/country/PL/identifiers", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/country/PL/identifiers";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /companies:
    get:
      tags:
      - Company Identification
      description: |
        Search for companies using name or other identifiers.

        Tips for searching:
        * If you have a unique identifier for the company (i.e. you want exactly one result), use identifyCompany instead.
        * You don't need to include the legal form in the name (e.g. if the company is called PRINT Solutions Ltd, just search for PRINT Solutions).

        Allowed combinations:
        * full_text_query
        * full_text_query with country_iso_code
        * company_name and/or zip_code and/or city together with country_iso_code
      operationId: findCompany
      parameters:
        - name: full_text_query
          in: query
          description: A flexible free-text search query (as you would use in a search
            engine). Company names, addresses and company identifieres are searched.
            Results are ordered by relevance
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: country_iso_code
          in: query
          description: country where the company is registered (ISO 3166-1 alpha-2 code)
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: company_name
          in: query
          description: name (or partial name) of the company
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: company_name_phonetic
          in: query
          description: If set to true, the company name will be searched using a phonetic
            algorithm
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
        - name: zip_code
          in: query
          description: the postal code of the company
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: city
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: city_phonetic
          in: query
          description: If set to true, the city will be searched using a phonetic algorithm
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: true
        - name: offset
          in: query
          description: starting point within paged results (the X-Total-Count header
            of the response indicates the total number of results found)
          required: false
          style: form
          explode: true
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: number of results to fetch starting from offset (the X-Total-Count
            header of the response indicates the total number of results found)
          required: false
          style: form
          explode: true
          schema:
            maximum: 100
            minimum: 1
            type: integer
            default: 20
      responses:
        '200':
          description: Success
          headers:
            X-Toutal-Count-${countryCode}:
              description: Number of companies in a specific country
              style: simple
              explode: false
              schema:
                type: string
            X-Total-Count:
              description: total count of search results
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanySearchResult'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" "https://test.cofacecentraleurope.com/api/bi/v1/companies?company_name=Budowlane&country_iso_code=PL"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/companies?company_name=Budowlane&country_iso_code=PL", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/companies?company_name=Budowlane&country_iso_code=PL";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /companies/demo:
    get:
      tags:
      - Company Identification
      description: Lists the available demo companies
      operationId: getDemoCompanies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" "https://test.cofacecentraleurope.com/api/bi/v1/companies/demo"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/companies/demo", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
             public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/companies/demo";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /company:
    get:
      tags:
      - Company Identification
      description: |
        Find a company using a unique identifier (returns exactly 1 or 0 results).

        Tips for finding a company:
        * If you are searching using national identifiers, provide the country (via the country_iso_code)
        * You don't need to include the legal form in the name (e.g. if the company is called PRINT Solutions Ltd, just search for PRINT Solutions).
      operationId: identifyCompany
      parameters:
        - name: country_iso_code
          in: query
          description: country to search in (ISO 3166-1 alpha-2 code)
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: company_id
          in: query
          description: unique id of the company
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: icon_number
          in: query
          description: ICON number of the company
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: easy_number
          in: query
          description: EASY number of the company
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: identifier_type
          in: query
          description: the type of the national identifier to search for (use getIdentifiers
            to find out which identifiers are available per country)
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: identifier_value
          in: query
          description: the national identifier to search for
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: show_available_creditreport_products
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
        - name: show_available_monitoring_products
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetails'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" "https://test.cofacecentraleurope.com/api/bi/v1/company?identifier_type=120&identifier_value=6551640402&country_iso_code=PL"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/company?identifier_type=120&identifier_value=6551640402&country_iso_code=PL", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/company?identifier_type=120&identifier_value=6551640402&country_iso_code=PL";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /orders/creditreport:
    post:
      tags:
      - Order
      description: |
        Order a Business Report, a Score report (DRA: Debtor Risk Assessment), a Credit Opinion (CO) report and a Coface Advanced Opinion (CAO) report using the corresponding product codes from CC8800 table.

        You will need to specify at least:
        * the company to order (either with the company_id if the company has already been uniquely identified or with company_unidentified).
        * the product to order (product_details).
          * product_code: 200 for a standard credit report (values from code table CC8800).
          * language: the language of the report (e.g en for english).
          * format: xml, json, pdf, html or txt.
        * if you're using the demo API key, restrict your order to the company_id of a demo company.
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestedOrderDetails'
        required: true
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" -H "Content-Type: application/json" -d ''{"company_id":5606280,"product_details":{"product_code":200,"language":"en","format":"pdf"}}''
          "https://test.cofacecentraleurope.com/api/bi/v1/orders/creditreport"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "content-type": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          data = json.dumps(
              {
                  "company_id": "5415240",
                  "product_details": {
                      "product_code": "200",
                      "language": "EN",
                      "format": "html",
                  },
                  "credit_report_details": {
                      "research_instructions": "immediate_no_research"
                  },
              })
          response = requests.post("https://test.cofacecentraleurope.com/api/bi/v1/orders/creditreport", headers=headers, data=data)
          if (response.status_code == 202):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          string url = "https://test.cofacecentraleurope.com/api/bi/v1/orders/creditreport";
                          string payload = "{\"company_id\": \"5415240\",\"product_details\": {\"product_code\": \"200\",\"language\": \"EN\",\"format\": \"html\"},\"credit_report_details\": {\"research_instructions\": \"immediate_no_research\"}}";
                          HttpContent content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.PostAsync(new Uri(url), content).Result;
                          Console.WriteLine(response.ToString());
                          Console.WriteLine(response.Content.ReadAsStringAsync().Result);
                      }
                  }
              }
          }
      x-codegen-request-body-name: order_details
  /orders/monitoring:
    post:
      tags:
      - Order
      description: |
        Monitor a company to receive notifications when updated company data becomes available.

        You will need to specify at least:
        * the company to monitor (company_id)
        * the monitoring product to order (product_details).
          * product_code: 9002 for the standard CCE Risk monitor (values from code table CC8800).
          * language: the language of notification (e.g en for english).
          * format: xml, json, pdf, html or txt.
        * if you're using the demo API key, you cannot place a new monitoring order (you can check for notitifcations though)
      operationId: placeMonitoringOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestedMonitoringOrderDetails'
        required: true
      responses:
        "202":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X POST -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" -H "Content-Type: application/json" -d ''{"company_id":5606280,"product_details":{"product_code":200,"language":"en","format":"pdf"},"monitoring_details":{"start_date":"2018-03-09","duration_months":12}}''
          "https://test.cofacecentraleurope.com/api/bi/v1/orders/monitoring"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "Content-Type": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          data = json.dumps({
              "company_id": 102296980,
              "product_details": {
                  "product_code": 200,
                  "language": "en",
                  "format": "pdf"
              },
              "monitoring_details": {
                  "start_date": "2018-03-09",
                  "duration_months": 12
              }
          })
          response = requests.post("https://test.cofacecentraleurope.com/api/bi/v1/orders/monitoring", headers=headers, data=data)
          if (response.status_code == 202):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          string url = "https://test.cofacecentraleurope.com/api/bi/v1/orders/monitoring";
                          string payload = "{\"company_id\": \"102296980\",\"product_details\": {\"product_code\": \"200\",\"language\": \"en\",\"format\": \"pdf\"},\"monitoring_details\": {\"start_date\": \"2018-03-09\",\"duration_months\": \"12\"}}";
                          HttpContent content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.PostAsync(new Uri(url), content).Result;
                          Console.WriteLine(response.ToString());
                          Console.WriteLine(response.Content.ReadAsStringAsync().Result);

                      }
                  }
              }
          }
      x-codegen-request-body-name: order_details
  /orders:
    get:
      tags:
      - Order
      description: Find an order in your order history.
      operationId: getOrders
      parameters:
        - name: order_id
          in: query
          required: false
            style: form
            explode: false
            schema:
              type: array
              items:
                type: string
        - name: customer_reference
          in: query
          description: your own identifier for the order which you provided when you
            placed the order
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: coface_order_reference
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: order_type
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
              - credit_report
              - monitoring
        - name: product_code
          in: query
          description: product code (a value from code table CC8800)
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: ordered_from
          in: query
          description: the earliest order date for which to get orders
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: ordered_to
          in: query
          description: the latest order date for which to get orders
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: delivered_from
          in: query
          description: the earliest delivery date for which to get orders
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: delivered_to
          in: query
          description: the latest delivery date for which to get orders
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: starting point within paged results (the X-Total-Count header
            of the response indicates the total number of results found)
          required: false
          style: form
          explode: true
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: number of results to fetch starting from offset (the X-Total-Count
            header of the response indicates the total number of results found)
          required: false
          style: form
          explode: true
          schema:
            maximum: 100
            minimum: 1
            type: integer
            default: 20
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: total count of search results
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderStatus'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/orders'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/orders?limit=5", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/orders?limit=5";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /order/{id}:
    get:
      tags:
      - Order
      description: Retrieve the details of an order.
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: the unique id of the order (returned from placeOrder)
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/order/1234'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          order_id = "603f5ea2-b869-46c3-a85e-ed2677c1e4ed"
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/order/{0}".format(order_id), headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/order/8842ace2-e377-48d9-b129-f952950ea535";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /order/{id}/comment:
    put:
      tags:
      - Order
      description: Submit a comment to an order.
      operationId: submitComment
      parameters:
      - name: id
        in: path
        description: the unique id of the order (returned from placeOrder) to which
          the comment should be submitted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedOrder'
        required: true
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" -H "Content-Type: application/json" -d ''{"comment":"my
          comment"}'' "https://test.cofacecentraleurope.com/api/bi/v1/order/b61d46a2-f23f-4ca0-a954-d5cd2c70cfac/comment"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          order_id = "603f5ea2-b869-46c3-a85e-ed2677c1e4ed"
          comment = "any comment"
          headers = {"Accept": "application/json", "Content-Type": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          data = json.dumps({"comment": comment})
          response = requests.put("https://test.cofacecentraleurope.com/api/bi/v1/order/{0}/comment".format(order_id), headers=headers, data=data)
          if (response.status_code == 202):
              print("OK")
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          string url = "https://test.cofacecentraleurope.com/api/bi/v1/order/603f5ea2-b869-46c3-a85e-ed2677c1e4ed/comment";
                          string payload = "{\"comment\": \"some comment\"}";
                          HttpContent content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.PutAsync(new Uri(url), content).Result;
                          Console.WriteLine(response.ToString());
                          Console.WriteLine(response.Content.ReadAsStringAsync().Result);
                      }
                  }
              }
          }
      x-codegen-request-body-name: details
  /order/{id}/status:
    put:
      tags:
      - Order
      description: Request an update to the status of a previously submitted order.
      operationId: updateStatus
      parameters:
      - name: id
        in: path
        description: the unique id of the order (returned from placeOrder).
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedStatus'
        required: true
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X PUT -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" -H "Content-Type: application/json" -d ''{"action":"cancel","cancel_reason":"placed
          by mistake"}'' "https://test.cofacecentraleurope.com/api/bi/v1/order/b61d46a2-f23f-4ca0-a954-d5cd2c70cfac/status"'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          order_id = "603f5ea2-b869-46c3-a85e-ed2677c1e4ed"
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535", "Content-Type": "application/json"}
          data = json.dumps({"action": "cancel", "cancel_reason": "order placed by mistake"})
          response = requests.put("https://test.cofacecentraleurope.com/api/bi/v1/order/{0}/status".format(order_id), headers=headers, data=data)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          string url = "https://test.cofacecentraleurope.com/api/bi/v1/order/603f5ea2-b869-46c3-a85e-ed2677c1e4ed/status";
                          string payload = "{\"action\": \"cancel\",\"cancel_reason\": \"order placed by mistake\"}";
                          HttpContent content = new StringContent(payload, System.Text.Encoding.UTF8, "application/json");
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.PutAsync(new Uri(url), content).Result;
                          Console.WriteLine(response.ToString());
                          Console.WriteLine(response.Content.ReadAsStringAsync().Result);
                      }
                  }
              }
          }
      x-codegen-request-body-name: details
  /order/{id}/documents:
    get:
      tags:
      - Order
      description: Lists the documents (e.g. reports) associated with an order.
      operationId: getOrderDocumentList
      parameters:
      - name: id
        in: path
        description: the unique id of the order (returned from placeOrder) to which
          the comment should be submitted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDocument'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/order/1234/documents'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          order_id = "cc4b853d-f059-48e0-97cc-ef3785315213"
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/order/{0}/documents".format(order_id), headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/order/cc4b853d-f059-48e0-97cc-ef3785315213/documents";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /order/{id}/document/{file_name}:
    get:
      tags:
      - Order
      description: Retrieve a document (e.g. a report) associated with a finished
        order. The document may take some time to be created, so you need to check
        that the order status is "finished" before you retrieve the document (see
        GET '/order/{id}/status' above). You can see an example of this workflow at
        https://github.com/coface/business-information-api/blob/master/python/complete-workflows/search-order-download.py
      operationId: getOrderDocument
      parameters:
      - name: id
        in: path
        description: the unique id of the order (returned from placeOrder) to which
          the comment should be submitted.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: file_name
        in: path
        description: the file name if the document (as returned from getOrderDocumentList).
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
            application/msword:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/order/1234/document/report.html'
      - lang: Python
        source: |-
          #!/usr/bin/env python3

          # note: you need to check that the status of the order is "finished" before retrieving the document
          # see https://github.com/coface/business-information-api/blob/master/python/complete-workflows/search-order-download.py for the full sequence

          import requests
          import json

          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          order_id = "cc4b853d-f059-48e0-97cc-ef3785315213"
          filename = "report.html"
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/order/{0}/document/{1}".format(order_id, filename), headers=headers)
          if (response.status_code == 200):
              print(response.text)
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          // note: you need to check that the status of the order is "finished" before retrieving the document
          // see https://github.com/coface/business-information-api/blob/master/C%23/complete-workflows/search-order-download.cs for the full sequence

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/order/cc4b853d-f059-48e0-97cc-ef3785315213/document/report.html";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /notifications:
    get:
      tags:
      - Notifications
      description: Get a list of available monitoring notifications.
      operationId: getNotifications
      parameters:
      - name: notification_timestamp_from
        in: query
        description: Lower limit (inclusive) for the date of retrieved notifications
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: notification_timestamp_to
        in: query
        description: Upper limit (inclusive) for the date of retrieved notifications
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: offset
        in: query
        description: starting point within paged results (the X-Total-Count header
          of the response indicates the total number of results found)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: number of results to fetch starting from offset (the X-Total-Count
          header of the response indicates the total number of results found)
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 20
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: total count of search results
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/notifications'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/notifications", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/notifications";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /notification/{id}:
    get:
      tags:
      - Notifications
      description: Retrieves a monitoring notification (the main notification content).
        If the notification might include multiple documents then use the method /notification/{id}/documents
        to retrieve all documents.
      operationId: getNotificationDocument
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/notification/1234'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          notification_id = 55
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/notification/{0}".format(notification_id), headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/notification/55";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /notification/{id}/documents:
    get:
      tags:
      - Notifications
      description: Lists the documents (e.g. the main notification content and possible
        notification attachments or the notification content in a different format)
        associated with a notification.
      operationId: getNotificationDocumentsList
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportDocument'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/notification/1234/documents'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          order_id = "cc4b853d-f059-48e0-97cc-ef3785315213"
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/notification/{0}/documents".format(order_id), headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/notification/cc4b853d-f059-48e0-97cc-ef3785315213/documents";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /notification/{id}/document/{file_name}:
    get:
      tags:
      - Notifications
      description: Retrieve a document (e.g. the main notification or a notification
        attachment) associated with a notification.
      operationId: getSpecificNotificationDocument
      parameters:
      - name: id
        in: path
        description: the unique id of the notification
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: file_name
        in: path
        description: the file name if the document (as returned from getNotificationDocumentList).
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            text/xml:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
                format: binary
            text/plain:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                type: string
                format: binary
            application/msword:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/notification/1234/document/notification.json'
      - lang: Python
        source: |-
          #!/usr/bin/env python3

          import requests
          import json

          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          order_id = "cc4b853d-f059-48e0-97cc-ef3785315213"
          filename = "notification.json"
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/notification/{0}/document/{1}".format(order_id, filename), headers=headers)
          if (response.status_code == 200):
              print(response.text)
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/notification/cc4b853d-f059-48e0-97cc-ef3785315213/document/notification.json";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /codedvalues:
    get:
      tags:
      - Misc
      description: Retrieves the list of possible code names (i.e. legal forms, activities
        etc.)
      operationId: getCodetables
      responses:
        '200':
          description: Success
          headers:
            X-Total-Count:
              description: total count of search results
              style: simple
              explode: false
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodeTable'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/codedvalues'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/codedvalues", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/codedvalues";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }
  /codedvalues/{code_name}:
    get:
      tags:
      - Misc
      description: Retrieves the list of possible code values (i.e. legal forms, activities
        etc.)
      operationId: getCodetableValues
      parameters:
      - name: code_name
        in: path
        description: the code table name (e.g. CC0040 for legal forms)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodedValue'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
      x-code-samples:
      - lang: Curl
        source: 'curl -X GET -H "api_key: 8842ace2-e377-48d9-b129-f952950ea535" -H
          "Accept: application/json" https://test.cofacecentraleurope.com/api/bi/v1/codedvalues/CC0040'
      - lang: Python
        source: |-
          #!/usr/bin/env python3
          import requests
          import json
          headers = {"Accept": "application/json", "api_key": "8842ace2-e377-48d9-b129-f952950ea535"}
          response = requests.get("https://test.cofacecentraleurope.com/api/bi/v1/codedvalues/CC0040", headers=headers)
          if (response.status_code == 200):
              print(json.dumps(response.json(), indent=2))
          else:
              raise ValueError("server returned http status %d (%s)" % (response.status_code, response.text))
      - lang: C#
        source: |-
          using System;
          using System.Net.Http;

          namespace ConsoleProgram
          {
              public class Class1
              {
                  private const string url = "https://test.cofacecentraleurope.com/api/bi/v1/codedvalues/CC0040";

                  static void Main(string[] args)
                  {
                      using (var httpClient = new HttpClient())
                      {
                          httpClient.DefaultRequestHeaders.Add("api_key", "8842ace2-e377-48d9-b129-f952950ea535");
                          var response = httpClient.GetStringAsync(new Uri(url)).Result;
                          Console.WriteLine(response.ToString());
                      }
                  }
              }
          }